lead(night_mood, default = first(night_mood)),
NA_real_),
lead_night_arousal = if_else(
beepo == 5,
lead(night_arousal, default = first(night_arousal)),
NA_real_),
lead_night_valence = if_else(
beepo == 5,
lead(night_valence, default = first(night_valence)),
NA_real_)) %>% ungroup()
data_with_night <- data_with_night %>% mutate(
mood = case_when(
beepo == 5 & is.na(mood) ~ lead_night_mood,
beepo == 5 & !is.na(mood) & !is.na(lead_night_mood) ~
(mood + lead_night_mood)/2,
TRUE ~ mood
),
arousal = case_when(
beepo == 5 & is.na(arousal) ~ lead_night_arousal,
beepo == 5 & !is.na(arousal) & !is.na(lead_night_arousal) ~
(arousal + lead_night_arousal)/2,
TRUE ~ arousal
),
valence = case_when(
beepo == 5 & is.na(valence) ~ lead_night_valence,
beepo == 5 & !is.na(valence) & !is.na(lead_night_valence) ~
(valence + lead_night_valence)/2,
TRUE ~ valence)
)
data <- data_with_night
data <- data %>% subset(
select = -c(night_mood, night_arousal, night_valence,
total_time_diff, max_time_diff,
total_inactivity, max_inactivity,
MAX_inactivity_timediff,
lead_night_mood, lead_night_arousal, lead_night_valence))
weekdays(data$date)
as.numeric(weekdays(data$date))
data <- data %>%
mutate(weekday = weekdays(date),
weekday = factor(
weekday,
labels = 1:7,
levels = c("Monday", "Tuesday",
"Wednesday", "Thursday",
"Friday", "Saturday",
"Sunday")))
data$weekday
# Creating Variable: the day of the week (of Observation)
data <- data %>%
mutate(weekday = weekdays(date),
weekday = as.numeric(factor(
weekday,
labels = 1:7,
levels = c("Monday", "Tuesday",
"Wednesday", "Thursday",
"Friday", "Saturday",
"Sunday"))))
data$weekday
colnames(data)
data <- data_with_night
data <- data %>% subset(
select = -c(night_mood, night_arousal, night_valence,
total_time_diff, max_time_diff,
total_inactivity, max_inactivity,
MAX_inactivity_timediff,
lead_night_mood, lead_night_arousal, lead_night_valence))
# Creating Variable: the day of the week (of Observation)
data <- data %>%
mutate(weekday = weekdays(date),
weekday = as.numeric(factor(
weekday,
labels = 1:7,
levels = c("Monday", "Tuesday",
"Wednesday", "Thursday",
"Friday", "Saturday",
"Sunday"))))
# Creating Variable: the week of the year (of Observation)
data <- data %>%
mutate(week_of_year = lubridate::week(date_time))
# Creating Variable: the week of the year (of Observation)
data <- data %>%
mutate(week_of_year = lubridate::week(date))
test_days <- length(unique(data$date)) * (1/5)
data_TRAIN_time <- data %>% filter(date <= max(data$date) - test_days)
length(unique(data_TRAIN_time$date))
data_TEST_time <- data %>% filter(date > max(data$date) - test_days)
length(unique(data_TEST_time$date))
participants <- unique(data$ID)
set.seed(11042024) # Setting random seed with the date
test_participants <- sample(participants, length(participants)* 1/4)
test_participants
data_TEST_id <- data_1 %>% filter(ID %in% test_participants)
unique(as.numeric(data_TEST_id$ID))
`%not_in%` <- purrr::negate(`%in%`)
data_TRAIN_id <- data_1 %>% dplyr::filter(ID %not_in% test_participants)
unique(as.numeric(data_TRAIN_id$ID))
participants <- unique(data$ID)
set.seed(11042024) # Setting random seed with the date
test_participants <- sample(participants, length(participants)* 1/4)
test_participants
data_TEST_id <- data_1 %>% filter(ID %in% test_participants)
unique(as.numeric(data_TEST_id$ID))
`%not_in%` <- purrr::negate(`%in%`)
data_TRAIN_id <- data_1 %>% dplyr::filter(ID %not_in% test_participants)
unique(as.numeric(data_TRAIN_id$ID))
data_to_write_TRAIN <- fix_time(data_TRAIN_id)
write.csv(data_to_write_TRAIN, "data/data_2_TRAIN_ID_aggregated_beep.csv")
data_to_write_TEST <- fix_time(data_TEST_id)
write.csv(data_to_write_TEST, "data/data_2_TEST_ID_aggregated_beep.csv")
library(mice)
install.packages(mice)
install.packages("mice")
library(mice)
x <- data
data <- data_TRAIN_id
# Setting up the mice imputation
# Automatically set up a predictor matrix that considers the hierarchical structure
init <- mice(data, maxit = 0)  # just to create the initial setup without running imputation
# Modify the predictor matrix to include/exclude predictors as needed
# Typically, you might not want 'ID' to predict itself or use 'observation_day' or 'beep' to predict 'some_value'
init$predictorMatrix["some_value", c("ID", "observation_day", "beep")] <- 1  # 1 means include as predictors
# Modify the predictor matrix to include/exclude predictors as needed
# Typically, you might not want 'ID' to predict itself or use 'observation_day' or 'beep' to predict 'some_value'
init$predictorMatrix["mood", c("ID", "observation_day", "beep")] <- 1  # 1 means include as predictors
View(init)
meth <- ini$meth
meth <- init$meth
meth
data
data <- data_with_night
data <- data %>% subset(
select = -c(night_mood, night_arousal, night_valence,
total_time_diff, max_time_diff,
total_inactivity, max_inactivity,
MAX_inactivity_timediff,
lead_night_mood, lead_night_arousal, lead_night_valence))
# Creating Variable: the day of the week (of Observation)
data <- data %>%
mutate(weekday = weekdays(date),
weekday = as.numeric(factor(
weekday,
labels = 1:7,
levels = c("Monday", "Tuesday",
"Wednesday", "Thursday",
"Friday", "Saturday",
"Sunday"))))
# Creating Variable: the week of the year (of Observation)
data <- data %>%
mutate(week_of_year = lubridate::week(date))
participants <- unique(data$ID)
set.seed(11042024) # Setting random seed with the date
test_participants <- sample(participants, length(participants)* 1/4)
test_participants
data_TEST_id <- data %>% filter(ID %in% test_participants)
unique(as.numeric(data_TEST_id$ID))
`%not_in%` <- purrr::negate(`%in%`)
data_TRAIN_id <- data %>% dplyr::filter(ID %not_in% test_participants)
unique(as.numeric(data_TRAIN_id$ID))
data_TRAIN_id
data <- data_TRAIN_id
# Setting up the mice imputation
# Automatically set up a predictor matrix that considers the hierarchical structure
init <- mice(data, maxit = 0) # just to create the initial setup without running imputation
meth <- init$meth
meth
# Modify the predictor matrix to include/exclude predictors as needed
# Typically, you might not want 'ID' to predict itself or use 'observation_day' or 'beep' to predict 'some_value'
init$predictorMatrix["mood", c("ID", "observation_day", "beep")] <- 1  # 1 means include as predictors
meth
init$predictorMatrix["mood", c("ID", "observation_day", "beep")] <- 1
meth
init <- mice(data, maxit = 0) # just to create the initial setup without running imputation
meth <- init$meth
meth
# Modify the predictor matrix to include/exclude predictors as needed
# Typically, you might not want 'ID' to predict itself or use 'observation_day' or 'beep' to predict 'some_value'
init$predictorMatrix["mood", c("ID", "observation_day", "beepo")] <- 1  # 1 means include as predictors
# Customize the method for each variable if needed, e.g., using pmm for some_value
meth <- init$method
meth["mood"] <- "pmm"  # predictive mean matching
# Run the actual imputation
imputed_data <- mice(
data, method = meth, predictorMatrix = init$predictorMatrix, m = 5, seed = 500)
View(imputed_data)
completed_data <- complete(imputed_data)
View(completed_data)
View(data)
init$predictorMatrix[c("mood", "arousal", "valence"),
c("ID", "observation_day", "beepo", "activity", "screen")] <- 1
init$method
# Setting up the mice imputation
# Automatically set up a predictor matrix that considers the hierarchical structure
init <- mice(data, maxit = 0) # just to create the initial setup without running imputation
meth <- init$meth
init$meth
# Modify the predictor matrix to include/exclude predictors as needed
# Typically, you might not want 'ID' to predict itself or use 'observation_day' or 'beep' to predict 'some_value'
# 1 means include as predictors
init$predictorMatrix[c("mood", "arousal", "valence"),
c("ID", "observation_day", "beepo", "activity", "screen")] <- 1
# Run the actual imputation
imputed_data <- mice(
data, method = meth, predictorMatrix = init$predictorMatrix, m = 5, seed = 500)
data_to_write_TRAIN <- fix_time(data_TRAIN_id)
write.csv(data_TRAIN_id, "data/data_2_TRAIN_ID_aggregated_beep.csv")
pm <- mice::make.predictorMatrix(popular_mis)
pm <- mice::make.predictorMatrix(data)
pm
impmethod <- character(ncol(data))
impmethod
names(impmethod) <- colnames(data)
impmethod["mood"] <- "2l.lmer"
colnames(data)
colnames(data)[-2:3]
impmethod <- character(ncol(data))
names(impmethod) <- colnames(data)
impmethod["mood"] <- "2l.lmer"
impmethod
colnames(data)
pm
pm["ID", "observation_day"]
pm["ID"]
pm["ID",]
pm["ID",] <- -2
pm
pm <- mice::make.predictorMatrix(data)
pm
impmethod
impmethod <- character(ncol(data))
names(impmethod) <- colnames(data)
impmethod["mood"] <- "2l.lmer"
impmethod["arousal"] <- "2l.lmer"
impmethod["valence"] <- "2l.lmer"
impmethod
impmethod <- character(ncol(data))
names(impmethod) <- colnames(data)
impmethod["arousal"] <- "2l.lmer"
impmethod
pm <- mice::make.predictorMatrix(data)
pm["arousal", c("ID", "observation_day")] <- c(-2, -2)
pm
res.mice.md <- mice(
popular_mis, m=5, predictorMatrix = pm,
method=impmethod, maxit=10, printFlag = FALSE, seed=1874)
# run multiple imputations
res.mice.md <- mice(
data, m=5, predictorMatrix = pm,
method=impmethod, maxit=10, printFlag = FALSE, seed=1874)
res.mice.md
res.mice.md <- mice(
data, predictorMatrix = pm,
method=impmethod, maxit=10, printFlag = FALSE, seed=1874)
# run multiple imputations
res.mice.md <- mice(
data, predictorMatrix = pm,
method=impmethod, maxit=10, printFlag = FALSE)
data
impmethod <- character(ncol(data))
names(impmethod) <- colnames(data)
impmethod["mood"] <- "2l.lmer"
impmethod["arousal"] <- "2l.lmer"
impmethod["valence"] <- "2l.lmer"
impmethod
# set default predictor matrix
pm <- mice::make.predictorMatrix(data)
pm["arousal", c("ID", "observation_day")] <- c(-2, -2)
# run multiple imputations
res.mice.md <- mice(
data, predictorMatrix = pm,
method=impmethod, maxit=10, printFlag = FALSE)
pm["arousal", c("ID", "observation_day", "mood", "valence")] <- c(-2, -2, 0, 0)
# run multiple imputations
res.mice.md <- mice(
data, predictorMatrix = pm,
method=impmethod, maxit=10, printFlag = FALSE)
impmethod <- character(ncol(data))
names(impmethod) <- colnames(data)
impmethod["arousal"] <- "2l.lmer"
pm["arousal", c("ID", "observation_day", "mood", "valence")] <- c(-2, -2, 0, 0)
# run multiple imputations
res.mice.md <- mice(
data, predictorMatrix = pm,
method=impmethod, maxit=10, printFlag = FALSE)
res.mice.md
# run multiple imputations
res.mice.md <- mice(
data, predictorMatrix = pm,
method=impmethod, maxit=10)
pm["arousal", c("ID", "observation_day", "beepo", "valence")] <- c(-2, -2, -2, 0)
# run multiple imputations
res.mice.md <- mice(
data, predictorMatrix = pm,
method=impmethod, maxit=10)
library(lme4)
impmethod <- character(ncol(data))
names(impmethod) <- colnames(data)
impmethod["mood"] <- "2l.lmer"
res.mice.md <- mice(
data, predictorMatrix = pm,
method=impmethod, maxit=10)
res.mice.md
pm
res.mice.md
View(res.mice.md)
# Extract the completed data
completed_data <- mice::complete(res.mice.md)
View(completed_data)
impmethod
impmethod <- character(ncol(data))
names(impmethod) <- colnames(data)
impmethod["arousal"] <- "2l.lmer"
pm["arousal", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# set default predictor matrix
pm <- mice::make.predictorMatrix(data)
pm["arousal", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
pm
impmethod
# run multiple imputations
res.mice.md <- mice(
data, predictorMatrix = pm,
method=impmethod, maxit=10)
impmethod <- character(ncol(data))
names(impmethod) <- colnames(data)
impmethod["valence"] <- "2l.lmer"
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# set default predictor matrix
pm <- mice::make.predictorMatrix(data)
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# run multiple imputations
res.mice.md <- mice(
data, predictorMatrix = pm,
method=impmethod, maxit=10)
data$valence <- data$valence+2
impmethod <- character(ncol(data))
names(impmethod) <- colnames(data)
impmethod["valence"] <- "2l.lmer"
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# run multiple imputations
res.mice.md <- mice(
data, predictorMatrix = pm,
method=impmethod, maxit=10)
impmethod["arousal"] <- "2l.norm"
impmethod["valence"] <- "2l.norm"
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# run multiple imputations
res.mice.md <- mice(
data, predictorMatrix = pm,
method=impmethod, maxit=10)
impmethod["valence"] <- "2l.norm"
impmethod <- character(ncol(data))
names(impmethod) <- colnames(data)
impmethod["valence"] <- "2l.norm"
impmethod
# set default predictor matrix
pm <- mice::make.predictorMatrix(data)
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# run multiple imputations
res.mice.md <- mice(
data, predictorMatrix = pm,
method=impmethod, maxit=10)
data$valence
data$mood
data <- data_TRAIN_id
impmethod["valence"] <- "2l.norm"
impmethod
# set default predictor matrix
pm <- mice::make.predictorMatrix(data)
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# run multiple imputations
res.mice.md <- mice(
data,
predictorMatrix = pm,
method=impmethod,
maxit=10)
impmethod["valence"] <- "ppn"
# run multiple imputations
res.mice.md <- mice(
data,
predictorMatrix = pm,
method=impmethod,
maxit=10)
impmethod["valence"] <- "pnn"
# set default predictor matrix
pm <- mice::make.predictorMatrix(data)
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# run multiple imputations
res.mice.md <- mice(
data,
predictorMatrix = pm,
method=impmethod,
maxit=10)
# If any categorical variables are not factors, convert them
data$ID <- as.factor(data$ID)
data$observation_day <- as.factor(data$observation_day)
# Ensure beepo is correctly spelled and treated
data$beepo <- as.factor(data$beepo)  # Confirm 'beepo' is the correct variable name
impmethod["valence"] <- "2l.lmer"
# set default predictor matrix
pm <- mice::make.predictorMatrix(data)
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# run multiple imputations
res.mice.md <- mice(
data,
predictorMatrix = pm,
method=impmethod,
maxit=10)
data <- data_TRAIN_id
impmethod["valence"] <- "pmm"
# set default predictor matrix
pm <- mice::make.predictorMatrix(data)
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# run multiple imputations
res.mice.md <- mice(
data,
predictorMatrix = pm,
method=impmethod,
maxit=10)
# Extract the completed data
completed_data <- mice::complete(res.mice.md)
View(completed_data)
impmethod
impmethod["valence"] <- "2l.pan	"
impmethod["valence"] <- "2l.pan"
impmethod
# set default predictor matrix
pm <- mice::make.predictorMatrix(data)
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# run multiple imputations
res.mice.md <- mice(
data,
predictorMatrix = pm,
method=impmethod,
maxit=10)
data
library(micemd)
install.packages(micemd)
install.packages("micemd")
install.packages("miceadds")
library(micemd)
library(miceadds)
impmethod["valence"] <- "2l.continuous	"
impmethod["valence"] <- "2l.continuous"
# set default predictor matrix
pm <- mice::make.predictorMatrix(data)
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# run multiple imputations
res.mice.md <- mice(
data,
predictorMatrix = pm,
method=impmethod,
maxit=10)
impmethod["valence"] <- "pmm"
# set default predictor matrix
pm <- mice::make.predictorMatrix(data)
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# run multiple imputations
res.mice.md <- mice(
data,
predictorMatrix = pm,
method=impmethod,
maxit=10)
# Extract the completed data
completed_data <- mice::complete(res.mice.md)
View(completed_data)
impmethod["mood"] <- "2l.lmer"
impmethod["arousal"] <- "pmm"
impmethod["valence"] <- "pmm"
# set default predictor matrix
pm <- mice::make.predictorMatrix(data)
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# run multiple imputations
res.mice.md <- mice(
data,
predictorMatrix = pm,
method=impmethod,
maxit=10)
miceadds::
impmethod <- character(ncol(data))
names(impmethod) <- colnames(data)
impmethod <- character(ncol(data))
names(impmethod) <- colnames(data)
impmethod["mood"] <- "2l.lmer"
impmethod["arousal"] <- "pmm"
impmethod["valence"] <- "pmm"
# set default predictor matrix
pm <- mice::make.predictorMatrix(data)
pm["valence", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
pm["arousal", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
pm["mood", c("ID", "observation_day", "beepo")] <- c(-2, -2, -2)
# run multiple imputations
res.mice.md <- mice(
data,
predictorMatrix = pm,
method=impmethod,
maxit=10)
pm["valence", c("observation_day", "beepo")] <- c(-2, -2, -2)
impmethod <- character(ncol(data))
names(impmethod) <- colnames(data)
impmethod["valence"] <- "pmm"
pm["valence", c("observation_day", "beepo")] <- c(-2, -2, -2)
pm["valence", c("observation_day", "beepo")] <- c(-2, -2)
# run multiple imputations
res.mice.md <- mice(
data,
predictorMatrix = pm,
method=impmethod,
maxit=10)
data <- data_TRAIN_id
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
