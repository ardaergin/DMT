filter(observation_day != 0) %>% subset(select = -new_day_flag)
data_beepo_0 <- combined_data_clean_removed_obs_day_0 %>% filter(
beepo == 0 | (time == "21:00:01" & is.na(obs_number)))
# Sort data by date_time
data_beepo_0 <- data_beepo_0 %>% arrange(ID, date_time)
# Column for the time difference between
# the current observation and the last observation
data_beepo_0 <- data_beepo_0 %>%
group_by(ID, observation_day) %>% mutate(
# For every observation, getting the difference between the previous
time_diff = round(
difftime(date_time, lag(date_time),
units = "hours"), 3),
# If it is 15, then make it 9, for looking at sleep later
time_diff_adj = ifelse(time_diff == 15, 0, time_diff),
# Gap based on both these variables
possible_sleep_gap = (time_diff_adj > 1 & time_diff_adj <= 9),
time_diff_valid = ifelse(
possible_sleep_gap, time_diff_adj, 0)
) %>%
ungroup()
# Inactivity
data_beepo_0 <- data_beepo_0 %>% mutate(
is_inactive = dplyr::case_when(
is.na(activity) ~ FALSE,
activity == 0 ~ TRUE,
TRUE ~ FALSE))
# Applying a run-length encoding to count consecutive inactive periods
data_beepo_0 <- data_beepo_0 %>% group_by(ID) %>% mutate(
consecutive_inactive = with(rle(is_inactive), {
# Only count lengths where is_inactive is TRUE:
lengths_corrected <- lengths * values
# Repeat these lengths according to run lengths:
rep(lengths_corrected, lengths)
})) %>%
ungroup()
# Getting rid of the consequitve duplicates so that summing up later is easier.
data_beepo_0 <- data_beepo_0 %>%
mutate(
# Use lag to compare each value to the previous,
# initializing the first comparison to TRUE
consecutive_inactive_fix = if_else(
consecutive_inactive != lead(
consecutive_inactive,
default = consecutive_inactive[n()]+1),
(consecutive_inactive - 1), 0),
consecutive_inactive_fix = if_else(
consecutive_inactive_fix == -1,
0,
consecutive_inactive_fix)
)
table(data_beepo_0$consecutive_inactive_fix)
aggregated_night_data <- data_beepo_0 %>%
group_by(ID, observation_day) %>%
summarise(
night_mood = safe_mean(mood),
night_arousal = safe_mean(circumplex.arousal),
night_valence = safe_mean(circumplex.valence),
night_physical_activity = safe_mean(activity),
night_screen = sum(screen, na.rm = T),
night_appcat_combined = sum(
appCat.builtin,
appCat.communication,
appCat.entertainment,
appCat.finance,
appCat.game,
appCat.office,
appCat.other,
appCat.social,
appCat.travel,
appCat.unknown,
appCat.utilities,
appCat.weather, na.rm = T),
total_time_diff = safe_sum(time_diff_valid),
max_time_diff = max(time_diff_valid, na.rm = T),
total_inactivity = safe_sum(consecutive_inactive_fix),
max_inactivity = max(consecutive_inactive_fix, na.rm = T),
SUM_inactivity_timediff = sum(
total_inactivity,
total_time_diff,
na.rm = T),
MAX_inactivity_timediff = max(
max_time_diff,
max_inactivity,
na.rm = T),
.groups = "drop")
aggregated_data <- combined_data_clean_removed_obs_day_0 %>%
group_by(ID, observation_day, beepo) %>%
summarise(
date = max(date),
mood = mean(mood, na.rm = TRUE),
arousal = mean(circumplex.arousal, na.rm = TRUE),
valence = mean(circumplex.valence, na.rm = TRUE),
activity = mean(activity, na.rm = TRUE),
screen = sum(screen, na.rm = TRUE),
call = sum(call, na.rm = TRUE),
sms = sum(sms, na.rm = TRUE),
appCat.builtin = sum(appCat.builtin, na.rm = TRUE),
appCat.communication = sum(appCat.communication, na.rm = TRUE),
appCat.entertainment = sum(appCat.entertainment, na.rm = TRUE),
appCat.finance = sum(appCat.finance, na.rm = TRUE),
appCat.game = sum(appCat.game, na.rm = TRUE),
appCat.office = sum(appCat.office, na.rm = TRUE),
appCat.other = sum(appCat.other, na.rm = TRUE),
appCat.social = sum(appCat.social, na.rm = TRUE),
appCat.travel = sum(appCat.travel, na.rm = TRUE),
appCat.unknown = sum(appCat.unknown, na.rm = TRUE),
appCat.utilities = sum(appCat.utilities, na.rm = TRUE),
appCat.weather = sum(appCat.weather, na.rm = TRUE),
.groups = "drop")
data_with_night <- aggregated_data %>%
left_join(aggregated_night_data, by = c("ID", "observation_day")) %>%
filter(beepo != 0)
data_with_night <- data_with_night %>%
arrange(ID, observation_day, beepo) %>%
group_by(ID) %>% mutate(
# Create lagged versions of night variables to fill backwards
lead_night_mood = if_else(
beepo == 5,
lead(night_mood, default = first(night_mood)),
NA_real_),
lead_night_arousal = if_else(
beepo == 5,
lead(night_arousal, default = first(night_arousal)),
NA_real_),
lead_night_valence = if_else(
beepo == 5,
lead(night_valence, default = first(night_valence)),
NA_real_)) %>% ungroup()
data_with_night <- data_with_night %>% mutate(
mood = case_when(
beepo == 5 & is.na(mood) ~ lead_night_mood,
beepo == 5 & !is.na(mood) & !is.na(lead_night_mood) ~
(mood + lead_night_mood)/2,
TRUE ~ mood
),
arousal = case_when(
beepo == 5 & is.na(arousal) ~ lead_night_arousal,
beepo == 5 & !is.na(arousal) & !is.na(lead_night_arousal) ~
(arousal + lead_night_arousal)/2,
TRUE ~ arousal
),
valence = case_when(
beepo == 5 & is.na(valence) ~ lead_night_valence,
beepo == 5 & !is.na(valence) & !is.na(lead_night_valence) ~
(valence + lead_night_valence)/2,
TRUE ~ valence)
)
data <- data_with_night
data <- data %>% subset(
select = -c(night_mood, night_arousal, night_valence,
total_time_diff, max_time_diff,
total_inactivity, max_inactivity,
lead_night_mood, lead_night_arousal, lead_night_valence))
# Creating Variable: the day of the week (of Observation)
data <- data %>%
mutate(weekday = weekdays(date),
weekday = as.numeric(factor(
weekday,
labels = 1:7,
levels = c("Monday", "Tuesday",
"Wednesday", "Thursday",
"Friday", "Saturday",
"Sunday"))))
# Creating Variable: the week of the year (of Observation)
data <- data %>%
mutate(week_of_year = lubridate::week(date))
save(data, "R_code_2.RData")
save(data, file = "R_code_2.RData")
source("requirements.R")
load("R_code_2.RData")
View(data)
load("R_code_2.RData")
model <- lm(y ~ ., data = data)
model <- lm(mood ~ ., data = data)
summary(model)
bptest(model) # Test for heteroscedasticity
lmtest::bptest(model)
summary(model)
anova(model)
?car::yjPower()
car::yjPower(data$appCat.communication, lambda = 0)
x <- car::yjPower(data$appCat.communication, lambda = 0)
hist(x)
x <- car::yjPower(data$appCat.communication, lambda = 1)
hist(x)
x <- car::yjPower(data$appCat.communication, lambda = 0.5)
hist(x)
x <- car::yjPower(data$appCat.communication, lambda = -1)
hist(x)
x <- car::yjPower(data$appCat.communication, lambda = -0.1)
hist(x)
?par()
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 1)
par(mfrow = c(1,2))
hist(x)
x <- car::yjPower(data$appCat.communication, lambda = 1)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 0.1)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 0.2)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 0.05)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 0.1)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 0.2)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 0.05)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 0.1)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 0.15)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 0.1)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.other, lambda = 0.1)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.other, lambda = 0.1)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.other))
x <- car::yjPower(data$appCat.other, lambda = 0.3)
x <- car::yjPower(data$appCat.other, lambda = 0.3)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.other))
x <- car::yjPower(data$appCat.other, lambda = 0.05)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.other))
x <- car::yjPower(data$appCat.other, lambda = 0.5)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.other))
x <- car::yjPower(data$appCat.other, lambda = 0.4)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.other))
x <- car::yjPower(data$appCat.other, lambda = 0.005)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.other))
x <- car::yjPower(data$appCat.other, lambda = 0)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$appCat.other))
for (i in names(data)) {
if (is.numeric(data[[i]])) {
boxplot(data[[i]], main = i)
}
}
data %>% ggplot(aes(x = "", y = appCat.game)) +
geom_boxplot(color = "grey") +
theme_classic(base_family = "Times") +
labs(title = "Boxplot of Standard Deviation of Mood",
y = "Standard Deviation of Mood",
x = "")
data %>% ggplot(aes(x = "", y = appCat.game)) +
geom_boxplot(color = "grey") +
theme_classic(base_family = "Times") +
labs(title = "Boxplot of Standard Deviation of App Category 'game'",
y = "Standard Deviation of Mood",
x = "")
data %>% ggplot(aes(x = "", y = appCat.game)) +
geom_boxplot(color = "grey") +
theme_classic(base_family = "Times") +
labs(title = "Boxplot of App Category 'game'",
y = "appCat.game Scores",
x = "")
data %>% ggplot(aes(x = "", y = appCat.game)) +
geom_boxplot(color = "forestgreen") +
theme_classic(base_family = "Times") +
labs(title = "Boxplot of App Category 'game'",
y = "appCat.game Scores",
x = "")
data %>% ggplot(aes(x = "", y = log1p(data$appCat.game))) +
geom_histogram(color = "forestgreen") +
theme_classic(base_family = "Times") +
labs(title = "Boxplot of App Category 'game'",
y = "appCat.game Scores",
x = "")
data %>% ggplot(aes(x = log1p(appCat.game))) +
geom_histogram(color = "forestgreen", fill = "forestgreen", bins = 30) +  # You can adjust the number of bins
theme_classic(base_family = "Times") +
labs(title = "Histogram of Log-transformed App Category 'game' Scores",
y = "Count",
x = "Log-transformed appCat.game Scores")
log1p(data$appCat.game)
hist(log1p(data$appCat.game))
hist(log1p(data$appCat.game))
hist((data$appCat.game))
hist(log1p(data$appCat.game))
for (i in names(data)) {
if (is.numeric(data[[i]])) {
hist(data[[i]], main = i)
hist(log1p(data[[i]]), main = i)
}
}
table(data$appCat.game)
sum(data$appCat.game==0)
x <- car::yjPower(data$night_screen, lambda = 0.1)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$night_screen))
x <- car::yjPower(data$night_screen, lambda = 0.05)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$night_screen))
x <- car::yjPower(data$night_screen, lambda = 0.2)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$night_screen))
qqnorm(x)
anova(model)
summary(model)
# Assuming beep_new is your dataset
variables <- names(data)
# Exclude the dependent variable and random effects identifiers
fixed_effects <- variables[!variables %in% c("mood", "ID", "observation_day", "beepo")]
# Create the fixed effects part of the formula by collapsing the variable names into a formula string
fixed_effects_formula <- paste(fixed_effects, collapse = " + ")
# Create the full model formula
model_formula <- as.formula(paste("mood ~", fixed_effects_formula,
"+ (1|ID) + (1|ID:observation_day) + (1|beepo)"))
# Fit the model
full_model <- lmer(model_formula, data = data)
performance::r2(full_model)
x <- car::yjPower(data$screen, lambda = 0.5)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$screen))
x <- car::yjPower(data$screen, lambda = 0.1)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$screen))
x <- car::yjPower(data$screen, lambda = 0.05)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$screen))
x <- car::yjPower(data$screen, lambda = 0.15)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$screen))
x <- car::yjPower(data$screen, lambda = 0.20)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$screen))
x <- car::yjPower(data$screen, lambda = 0.20)
par(mfrow = c(1,2))
hist(x)
hist((data$screen))
x <- car::yjPower(data$screen, lambda = 0.20)
par(mfrow = c(1,2))
hist(x)
hist(log1p(data$screen))
x <- car::yjPower(data$call, lambda = 0.20)
par(mfrow = c(3,1))
hist(x)
hist(log1p(data$screen))
hist(log1p(data$screen))
x <- car::yjPower(data$call, lambda = 0.20)
par(mfrow = c(1,3))
hist(x)
hist(log1p(data$screen))
hist(log1p(data$screen))
x <- car::yjPower(data$call, lambda = 0.20)
par(mfrow = c(1,3))
hist(x)
hist((data$call))
hist(log1p(data$call))
x <- car::yjPower(data$mood, lambda = 0.20)
par(mfrow = c(1,3))
hist(x)
hist((data$call))
hist(log1p(data$call))
x <- car::yjPower(data$mood, lambda = 0.20)
par(mfrow = c(1,3))
hist(x)
hist((data$mood))
hist(log1p(data$mood))
x <- car::yjPower(data$mood, lambda = 0.1)
par(mfrow = c(1,3))
hist(x)
hist((data$mood))
hist(log1p(data$mood))
x <- car::yjPower(data$mood, lambda = 0.5)
par(mfrow = c(1,3))
hist(x)
hist((data$mood))
hist(log1p(data$mood))
x <- car::yjPower(data$mood, lambda = 0.3)
par(mfrow = c(1,3))
hist(x)
hist((data$mood))
hist(log1p(data$mood))
x <- car::yjPower(data$mood, lambda = 0.6)
par(mfrow = c(1,3))
hist(x)
hist((data$mood))
hist(log1p(data$mood))
x <- car::yjPower(data$mood, lambda = 0.7)
par(mfrow = c(1,3))
hist(x)
hist((data$mood))
hist(log1p(data$mood))
x <- car::yjPower(data$mood, lambda = 0.8)
par(mfrow = c(1,3))
hist(x)
hist((data$mood))
hist(log1p(data$mood))
x <- car::yjPower(data$mood, lambda = 0.9)
par(mfrow = c(1,3))
hist(x)
hist((data$mood))
hist(log1p(data$mood))
x <- car::yjPower(data$mood, lambda = 2)
par(mfrow = c(1,3))
hist(x)
hist((data$mood))
hist(log1p(data$mood))
mean(data$mood)
mean(data$mood,na.rm=T)
median(data$mood,na.rm=T)
min(data$mood,na.rm=T)
sum(data$mood == 1)
sum(data$mood == 1, na.rm=T)
sum(data$mood == 2, na.rm=T)
sum(data$mood == 3, na.rm=T)
sum(data$mood == 4, na.rm=T)
sum(data$mood == 5, na.rm=T)
sum(data$mood == 6, na.rm=T)
sum(data$mood == 7, na.rm=T)
sum(data$mood == 8, na.rm=T)
sum(data$mood == 9, na.rm=T)
sum(data$mood == 10, na.rm=T)
(data$call == 0)
x <- car::yjPower(data$appCat.communication, lambda = 2)
par(mfrow = c(1,3))
hist(x)
hist((data$appCat.communication))
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 0.1)
par(mfrow = c(1,3))
hist(x)
hist((data$appCat.communication))
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 0.05)
par(mfrow = c(1,3))
hist(x)
hist((data$appCat.communication))
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 0.15)
par(mfrow = c(1,3))
hist(x)
hist((data$appCat.communication))
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$appCat.communication, lambda = 0.1)
par(mfrow = c(1,3))
hist(x)
hist((data$appCat.communication))
hist(log1p(data$appCat.communication))
x <- car::yjPower(data$night_physical_activity, lambda = 0.1)
par(mfrow = c(1,3))
hist(x)
hist((data$night_physical_activity))
hist(log1p(data$night_physical_activity))
x <- car::yjPower(data$night_physical_activity, lambda = 2)
par(mfrow = c(1,3))
hist(x)
hist((data$night_physical_activity))
hist(log1p(data$night_physical_activity))
x <- car::yjPower(data$night_physical_activity, lambda = 5)
par(mfrow = c(1,3))
hist(x)
hist((data$night_physical_activity))
hist(log1p(data$night_physical_activity))
x <- car::yjPower(data$night_physical_activity, lambda = 0.01)
par(mfrow = c(1,3))
hist(x)
hist((data$night_physical_activity))
hist(log1p(data$night_physical_activity))
data <- data %>% subset(select= -c(
appCat.weather,
appCat.utilities,
appCat.unknown,
appCat.other))
