table(wide_data$mood)
# Histogram
hist_mood <- data %>% filter(!is.na(mood)) %>%
ggplot(aes(x = mood)) +
geom_histogram(bins = 10, color = "black", fill = "firebrick") +
theme_classic(base_family = "Times") +
labs(title = "Distribution of Mood",
x = "Mood",
y = "Frequency")
print(hist_mood)
mood_summary <- data %>%
group_by(ID) %>%
summarise(
mean_mood = mean(mood, na.rm = TRUE),
median_mood = median(mood, na.rm = TRUE),
sd_mood = sd(mood, na.rm = TRUE),
max_mood = max(mood, na.rm = TRUE),
min_mood = min(mood, na.rm = TRUE))
mood_summary
for (participant in unique(data$ID)) {
moods <- data %>%
filter(!is.na(mood))
mood <- moods %>% filter(ID == participant)
p <- mood %>% ggplot(
aes(x = date_time,
y = mood)) +
geom_line(color = colors()[sample(8:length(colors()),1)]) +
scale_y_continuous(limits = c(1, 10)) +
theme_classic(base_family = "Times") +
theme(legend.position = "none") +
labs(title = paste(
"Mood Over Time for Participant Number",
participant),
x = "Time",
y = "Mood")
print(p)
}
# Creating a new variable in our "mood_summary"
# Putting the ID to the column if the participant is an outlier
# FROM: https://www.r-bloggers.com/2022/08/how-to-label-outliers-in-boxplots-in-ggplot2/
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5*IQR(x) | x > quantile(x, .75) + 1.5*IQR(x))
}
mood_summary <- mood_summary %>% mutate(
outlier = ifelse(find_outlier(sd_mood), ID, NA))
mood_summary$outlier[6] <- 7
mood_summary$outlier[27] <- 33
mood_summary %>% ggplot(aes(x = "", y = sd_mood)) +
geom_boxplot(color = "firebrick") +
theme_classic(base_family = "Times") +
labs(title = "Boxplot of Standard Deviation of Mood",
y = "Standard Deviation of Mood",
x = "") +
geom_text(aes(label=outlier), na.rm=TRUE, hjust=-1)
# Quick Summary: Arousal
summary(data$circumplex.arousal)
table(data$circumplex.arousal)
# Quick Summary: Valence
summary(data$circumplex.valence)
table(data$circumplex.valence)
# Histograms
hist_arousal <- data %>% filter(!is.na(circumplex.arousal)) %>%
ggplot(aes(x = circumplex.arousal)) +
geom_histogram(bins = 5, color = "black", fill = "deepskyblue2") +
theme_classic(base_family = "Times") +
labs(title = "Distribution of Arousal",
x = "Arousal",
y = "Frequency")
print(hist_arousal)
hist_valence <- data %>% filter(!is.na(circumplex.valence)) %>%
ggplot(aes(x = circumplex.valence)) +
geom_histogram(bins = 5, color = "black", fill = "purple2") +
theme_classic(base_family = "Times") +
labs(title = "Distribution of Valence",
x = "Valence",
y = "Frequency")
print(hist_valence)
(hist_mood | hist_arousal | hist_valence) +
patchwork::plot_layout(ncol = 3)
hist_mood_hour <- data %>% filter(!is.na(mood)) %>%
ggplot(aes(x = hour)) +
geom_histogram(bins = 24,
color = "black",
fill = "firebrick") +
theme_classic(base_family = "Times") +
labs(title = "Frequency of Mood Observations Per Hour",
x = "Hour",
y = "Frequency") +
scale_x_continuous(breaks = 0:23)
hist_arousal_hour <- data %>% filter(!is.na(circumplex.arousal)) %>%
ggplot(aes(x = hour)) +
geom_histogram(bins = 24,
color = "black",
fill = "deepskyblue2") +
theme_classic(base_family = "Times") +
labs(title = "Frequency of Arousal Observations Per Hour",
x = "Hour",
y = "Frequency") +
scale_x_continuous(breaks = 0:23)
hist_valence_hour <- data %>% filter(!is.na(circumplex.valence)) %>%
ggplot(aes(x = hour)) +
geom_histogram(bins = 24,
color = "black",
fill = "purple2") +
theme_classic(base_family = "Times") +
labs(title = "Frequency of Valence Observations Per Hour",
x = "Hour",
y = "Frequency") +
scale_x_continuous(breaks = 0:23)
(hist_mood | hist_arousal | hist_valence |
hist_mood_hour | hist_arousal_hour | hist_valence_hour) +
patchwork::plot_layout(ncol = 3, nrow = 2)
activity_count_per_hour <- data %>%
filter(!is.na(activity)) %>%
group_by(hour) %>%
summarize(count = n())
# Bar Plot
activity_count_per_hour %>%
ggplot(aes(
x = hour,
y = count)) +
geom_col(color = "black",
fill = "orange") + coord_cartesian(ylim=c(700,900))
activity_count_per_hour <- data %>%
filter(activity == 0) %>%
group_by(hour) %>%
summarize(count = n())
# Bar Plot
activity_count_per_hour %>%
ggplot(aes(
x = hour,
y = count)) +
geom_col(color = "black",
fill = "orange")
test_days <- length(unique(data$date)) * (1/5)
data_TRAIN_time <- data %>% filter(date <= max(data$date) - test_days)
length(unique(data_train$date))
test_days <- length(unique(data$date)) * (1/5)
data_TRAIN_time <- data %>% filter(date <= max(data$date) - test_days)
length(unique(data_TRAIN_time$date))
data_TEST_time <- data %>% filter(date > max(data$date) - test_days)
length(unique(data_TEST_time$date))
data_to_write_TRAIN <- fix_time(data_TRAIN_time)
write.csv(data_to_write_TRAIN, "data/data_2_TRAIN_TIME_not_aggregated.csv")
data_to_write_TEST <- fix_time(data_TEST_time)
write.csv(data_to_write_TEST, "data/data_2_TEST_TIME_not_aggregated.csv")
participants <- unique(as.numeric(data$ID))
set.seed(11042024) # Setting random seed with the date
test_participants <- sample(participants, length(participants)* 1/4)
test_participants
data_TEST_id <- data_1 %>% filter(as.numeric(ID) %in% test_participants)
unique(as.numeric(data_TEST_id$ID))
`%not_in%` <- purrr::negate(`%in%`)
data_TRAIN_id <- data_1 %>% dplyr::filter(as.numeric(ID) %not_in% test_participants)
unique(as.numeric(data_TRAIN_id$ID))
data_to_write_TRAIN <- fix_time(data_TRAIN_id)
write.csv(data_to_write_TRAIN, "data/data_2_TRAIN_ID_not_aggregated.csv")
data_to_write_TEST <- fix_time(data_TEST_id)
write.csv(data_to_write_TEST, "data/data_2_TEST_ID_not_aggregated.csv")
data <- data_TRAIN_time
# Generate additional times and beeps
additional_times <- c(
"09:00:01",
"12:00:01",
"15:00:01",
"18:00:01",
"21:00:01")
beep_identifiers <- c(1, 2, 3, 4, 5)
dates <- unique(as.Date(data$date_time))
participants <- unique(data$ID)
# Map times to beep identifiers
time_to_beep <- setNames(beep_identifiers, additional_times)
# Create a data frame of all combinations of dates, times, and participants
expanded_data <- expand.grid(
date = dates,
time = additional_times,
ID = participants)
expanded_data$date_time <- as.POSIXct(paste(
expanded_data$date,
expanded_data$time))
expanded_data$beep_number <- time_to_beep[as.character(expanded_data$time)]
# Initialize columns for expanded_data that are in data but not in expanded_data
additional_columns <- setdiff(names(data), names(expanded_data))
for (col in additional_columns) {
expanded_data[[col]] <- NA
}
# Combine original and expanded data
data$beep_number <- NA # since this variable does not exist in the original dataset
combined_data <- rbind(data, expanded_data)
# Remove duplicate rows and sort by date_time
combined_data <- combined_data %>%
arrange(ID, date_time) %>%
distinct()
# Make sure it is sorted by ID and date_time
combined_data <- combined_data %>%
arrange(ID, date_time)
# Fill beep_number NA values using zoo::na.locf()
combined_data$beepo <- zoo::na.locf(
combined_data$beep_number,
na.rm = FALSE,
fromLast = TRUE)
combined_data$beepo2 <- zoo::na.locf(
combined_data$beep_number,
na.rm = FALSE)
View(combined_data)
# Example aggregation: Calculate the mean mood for each beep interval for each participant
# You can change this to match the specific columns and summary statistics you need
aggregated_data <- combined_data %>%
group_by(ID, beep_number) %>%
summarize(mean_mood = mean(mood, na.rm = TRUE), .groups = 'drop')
aggregated_data <- combined_data %>%
group_by(ID, date, beepo) %>%
summarise(
mood = mean(mood, na.rm = TRUE),
arousal = mean(circumplex.arousal, na.rm = TRUE),
valence = mean(circumplex.valence, na.rm = TRUE),
activity = mean(activity, na.rm = TRUE),
screen = sum(screen, na.rm = TRUE),
call = sum(call, na.rm = TRUE),
sms = sum(sms, na.rm = TRUE),
appCat.builtin = sum(appCat.builtin, na.rm = TRUE),
appCat.communication = sum(appCat.communication, na.rm = TRUE),
appCat.entertainment = sum(appCat.entertainment, na.rm = TRUE),
appCat.finance = sum(appCat.finance, na.rm = TRUE),
appCat.game = sum(appCat.game, na.rm = TRUE),
appCat.office = sum(appCat.office, na.rm = TRUE),
appCat.other = sum(appCat.other, na.rm = TRUE),
appCat.social = sum(appCat.social, na.rm = TRUE),
appCat.travel = sum(appCat.travel, na.rm = TRUE),
appCat.unknown = sum(appCat.unknown, na.rm = TRUE),
appCat.utilities = sum(appCat.utilities, na.rm = TRUE),
appCat.weather = sum(appCat.weather, na.rm = TRUE),
.groups = "drop")
View(aggregated_data)
? imputeTS::na_kalman
?imputeTS::na_kalman
?imputeTS::na_kalman()
?imputeTS::na_kalman()
View(aggregated_data)
data_id_cleaned <- data %>% filter(
(as.numeric(ID) == 6 & date >= "2014-03-25") |
(as.numeric(ID) == 12 & date >= "2014-03-27") |
(as.numeric(ID) == 23 & date >= "2014-03-22") |
(as.numeric(ID) == 24 & date >= "2014-04-15") | # problem
(as.numeric(ID) == 25 & date >= "2014-04-09") |
(as.numeric(ID) == 26 & date >= "2014-03-24") |
(as.numeric(ID) == 27 & date >= "2014-04-03") |
(as.numeric(ID) == 28 & date >= "2014-04-01") |
(as.numeric(ID) == 29 & date >= "2014-04-01") |
(as.numeric(ID) == 31 & date >= "2014-04-02") |
(as.numeric(ID) == 32 & date >= "2014-04-02") |
(as.numeric(ID) == 33 & date >= "2014-04-15") # problem
)
data_id_cleaned <- aggregated_data %>% filter(
(as.numeric(ID) == 6 & date >= "2014-03-25") |
(as.numeric(ID) == 12 & date >= "2014-03-27") |
(as.numeric(ID) == 23 & date >= "2014-03-22") |
(as.numeric(ID) == 24 & date >= "2014-04-15") | # problem
(as.numeric(ID) == 25 & date >= "2014-04-09") |
(as.numeric(ID) == 26 & date >= "2014-03-24") |
(as.numeric(ID) == 27 & date >= "2014-04-03") |
(as.numeric(ID) == 28 & date >= "2014-04-01") |
(as.numeric(ID) == 29 & date >= "2014-04-01") |
(as.numeric(ID) == 31 & date >= "2014-04-02") |
(as.numeric(ID) == 32 & date >= "2014-04-02") |
(as.numeric(ID) == 33 & date >= "2014-04-15") # problem
)
participants_with_NAs_in_the_first_days <- c(6,12,23,24,25,26,27,28,29,31,32,33)
data_id_cleaned <- aggregated_data %>% filter(
(as.numeric(ID) == 6 & date >= "2014-03-25") |
(as.numeric(ID) == 12 & date >= "2014-03-27") |
(as.numeric(ID) == 23 & date >= "2014-03-22") |
(as.numeric(ID) == 24 & date >= "2014-04-15") | # problem
(as.numeric(ID) == 25 & date >= "2014-04-09") |
(as.numeric(ID) == 26 & date >= "2014-03-24") |
(as.numeric(ID) == 27 & date >= "2014-04-03") |
(as.numeric(ID) == 28 & date >= "2014-04-01") |
(as.numeric(ID) == 29 & date >= "2014-04-01") |
(as.numeric(ID) == 31 & date >= "2014-04-02") |
(as.numeric(ID) == 32 & date >= "2014-04-02") |
(as.numeric(ID) == 33 & date >= "2014-04-15") | # problem
as.numeric(ID) %not_in% participants_with_NAs_in_the_first_days
)
View(data_id_cleaned)
participants_with_NAs_in_the_first_days
as.numeric(6) %not_in% participants_with_NAs_in_the_first_days
data_id_cleaned <- aggregated_data %>% filter(
(as.numeric(ID) == 6 & date >= "2014-03-25") |
(as.numeric(ID) == 12 & date >= "2014-03-27") |
(as.numeric(ID) == 23 & date >= "2014-03-22") |
(as.numeric(ID) == 24 & date >= "2014-04-15") | # problem
(as.numeric(ID) == 25 & date >= "2014-04-09") |
(as.numeric(ID) == 26 & date >= "2014-03-24") |
(as.numeric(ID) == 27 & date >= "2014-04-03") |
(as.numeric(ID) == 28 & date >= "2014-04-01") |
(as.numeric(ID) == 29 & date >= "2014-04-01") |
(as.numeric(ID) == 31 & date >= "2014-04-02") |
(as.numeric(ID) == 32 & date >= "2014-04-02") |
(as.numeric(ID) == 33 & date >= "2014-04-15") | # problem
(as.numeric(ID) %not_in% participants_with_NAs_in_the_first_days)
)
data_id_cleaned <- aggregated_data %>% filter(
((as.numeric(ID) == 6) & (date >= "2014-03-25")) |
(as.numeric(ID) == 12 & date >= "2014-03-27") |
(as.numeric(ID) == 23 & date >= "2014-03-22") |
(as.numeric(ID) == 24 & date >= "2014-04-15") | # problem
(as.numeric(ID) == 25 & date >= "2014-04-09") |
(as.numeric(ID) == 26 & date >= "2014-03-24") |
(as.numeric(ID) == 27 & date >= "2014-04-03") |
(as.numeric(ID) == 28 & date >= "2014-04-01") |
(as.numeric(ID) == 29 & date >= "2014-04-01") |
(as.numeric(ID) == 31 & date >= "2014-04-02") |
(as.numeric(ID) == 32 & date >= "2014-04-02") |
(as.numeric(ID) == 33 & date >= "2014-04-15") | # problem
(as.numeric(ID) %not_in% participants_with_NAs_in_the_first_days)
)
View(data_id_cleaned)
data_id_cleaned <- aggregated_data %>% filter(
(as.numeric(ID) %not_in% participants_with_NAs_in_the_first_days) |
((as.numeric(ID) == 6) & (date >= "2014-03-25")) |
(as.numeric(ID) == 12 & date >= "2014-03-27") |
(as.numeric(ID) == 23 & date >= "2014-03-22") |
(as.numeric(ID) == 24 & date >= "2014-04-15") | # problem
(as.numeric(ID) == 25 & date >= "2014-04-09") |
(as.numeric(ID) == 26 & date >= "2014-03-24") |
(as.numeric(ID) == 27 & date >= "2014-04-03") |
(as.numeric(ID) == 28 & date >= "2014-04-01") |
(as.numeric(ID) == 29 & date >= "2014-04-01") |
(as.numeric(ID) == 31 & date >= "2014-04-02") |
(as.numeric(ID) == 32 & date >= "2014-04-02") |
(as.numeric(ID) == 33 & date >= "2014-04-15") # problem
)
participants_with_NAs_in_the_first_days <- c(6,12,23,24,25,26,27,28,29,31,32,33)
data_id_cleaned <- aggregated_data %>% filter(
(as.numeric(ID) %not_in% participants_with_NAs_in_the_first_days) |
((as.numeric(ID) == 6) & (date >= "2014-03-25")) |
(as.numeric(ID) == 12 & date >= "2014-03-27") |
(as.numeric(ID) == 23 & date >= "2014-03-22") |
(as.numeric(ID) == 24 & date >= "2014-04-15") | # problem
(as.numeric(ID) == 25 & date >= "2014-04-09") |
(as.numeric(ID) == 26 & date >= "2014-03-24") |
(as.numeric(ID) == 27 & date >= "2014-04-03") |
(as.numeric(ID) == 28 & date >= "2014-04-01") |
(as.numeric(ID) == 29 & date >= "2014-04-01") |
(as.numeric(ID) == 31 & date >= "2014-04-02") |
(as.numeric(ID) == 32 & date >= "2014-04-02") |
(as.numeric(ID) == 33 & date >= "2014-04-15") # problem
)
data_id_cleaned <- aggregated_data %>% filter(
(as.numeric(ID) %not_in% participants_with_NAs_in_the_first_days) |
(as.numeric(ID) == 6 & date >= as.Date("2014-03-25")) |
(as.numeric(ID) == 12 & date >= "2014-03-27") |
(as.numeric(ID) == 23 & date >= "2014-03-22") |
(as.numeric(ID) == 24 & date >= "2014-04-15") | # problem
(as.numeric(ID) == 25 & date >= "2014-04-09") |
(as.numeric(ID) == 26 & date >= "2014-03-24") |
(as.numeric(ID) == 27 & date >= "2014-04-03") |
(as.numeric(ID) == 28 & date >= "2014-04-01") |
(as.numeric(ID) == 29 & date >= "2014-04-01") |
(as.numeric(ID) == 31 & date >= "2014-04-02") |
(as.numeric(ID) == 32 & date >= "2014-04-02") |
(as.numeric(ID) == 33 & date >= "2014-04-15") # problem
)
data_id_cleaned <- aggregated_data %>% filter(
(as.numeric(ID) %not_in% participants_with_NAs_in_the_first_days) |
(as.numeric(ID) == 6 & as.Date(date) >= as.Date("2014-03-25")) |
(as.numeric(ID) == 12 & date >= "2014-03-27") |
(as.numeric(ID) == 23 & date >= "2014-03-22") |
(as.numeric(ID) == 24 & date >= "2014-04-15") | # problem
(as.numeric(ID) == 25 & date >= "2014-04-09") |
(as.numeric(ID) == 26 & date >= "2014-03-24") |
(as.numeric(ID) == 27 & date >= "2014-04-03") |
(as.numeric(ID) == 28 & date >= "2014-04-01") |
(as.numeric(ID) == 29 & date >= "2014-04-01") |
(as.numeric(ID) == 31 & date >= "2014-04-02") |
(as.numeric(ID) == 32 & date >= "2014-04-02") |
(as.numeric(ID) == 33 & date >= "2014-04-15") # problem
)
data_id_cleaned <- aggregated_data %>% filter(
(as.numeric(ID) %not_in% participants_with_NAs_in_the_first_days) |
(as.numeric(ID) == 6 && date >= "2014-03-25") |
(as.numeric(ID) == 12 & date >= "2014-03-27") |
(as.numeric(ID) == 23 & date >= "2014-03-22") |
(as.numeric(ID) == 24 & date >= "2014-04-15") | # problem
(as.numeric(ID) == 25 & date >= "2014-04-09") |
(as.numeric(ID) == 26 & date >= "2014-03-24") |
(as.numeric(ID) == 27 & date >= "2014-04-03") |
(as.numeric(ID) == 28 & date >= "2014-04-01") |
(as.numeric(ID) == 29 & date >= "2014-04-01") |
(as.numeric(ID) == 31 & date >= "2014-04-02") |
(as.numeric(ID) == 32 & date >= "2014-04-02") |
(as.numeric(ID) == 33 & date >= "2014-04-15") # problem
)
# Define participants with specific date constraints
participants_with_NAs_in_the_first_days <- c(6, 12, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33)
start_dates <- as.Date(c("2014-03-25", "2014-03-27", "2014-03-22", "2014-04-15",
"2014-04-09", "2014-03-24", "2014-04-03", "2014-04-01",
"2014-04-01", "2014-04-02", "2014-04-02", "2014-04-15"))
# Create a data frame of conditions
date_conditions <- data.frame(
ID = participants_with_NAs_in_the_first_days,
StartDate = start_dates
)
date_conditions
aggregated_data$date
is(aggregated_data$date)
is(aggregated_data$ID)
# Ensure data types are correct
aggregated_data$ID <- as.numeric(aggregated_data$ID)
aggregated_data$ID
# Merge conditions and filter
data_id_cleaned <- aggregated_data %>%
left_join(date_conditions, by = "ID") %>%
filter(is.na(StartDate) | date >= StartDate)
View(data_id_cleaned)
unique(data_id_cleaned$ID)
# General
library(dplyr)
library(tidyr)
library(ggplot2)
library(patchwork)
library(scales)
library(lubridate)
# Analysis
library(lme4)
library(Matrix)
# Time Series
library(zoo)
# Imputation for Time Series
library(imputeTS)
# Network Analysis
library(mlVAR)
library(igraph)
# Bayesian Multilevel
library(mHMMbayes)
# General
library(dplyr)
library(tidyr)
library(ggplot2)
library(patchwork)
library(scales)
library(lubridate)
# Analysis
library(lme4)
library(Matrix)
# Time Series
library(zoo)
# Imputation for Time Series
library(imputeTS)
# Network Analysis
library(mlVAR)
library(igraph)
# Bayesian Multilevel
library(mHMMbayes)
fix_time <- function(data){
data_to_write <- data
data_to_write <- data_to_write %>% mutate(
date_time = format(date_time, format="%Y-%m-%d %H:%M:%S"))
data_to_write$date_time <- as.character(data_to_write$date_time)
return(data_to_write)
}
data_raw <- read.csv("data/data.csv")
unique(data_raw$variable)
unique(data_raw$id)
##### ID #####
# Getting a better ID column:
data_0 <- data_raw %>%
mutate(ID = as.numeric(sapply(
strsplit(id, split = '\\.'), function(x) x[2])))
# Factorizing the ID variable
# (it causes some headaches, so I will not do this until data analysis)
### data_0$ID <- factor(data_0$ID) ###
##### "X" #####
# Changing the name for the "X" variable
colnames(data_0)[1] <- "obs_number"
# Getting rid of the id variable
data_1 <- data_0[,c("obs_number", "time", "ID", "variable", "value")]
# Checking if there is any NAs in the `time` variable
any(is.na(data_1$time))
# Transforming the variable into an time variable:
data_1 <- data_1 %>% mutate(
date_time = as.POSIXct(
as.character(time),
format="%Y-%m-%d %H:%M:%OS"))
data_2 <- subset(data_1, select = -time)
# Quick Summary
summary(data_2$date_time)
max(data_2$date_time) - min(data_2$date_time)
wide_data <- tidyr::pivot_wider(
data_1,
names_from = variable,
values_from = value)
data <- as.data.frame(wide_data)
data_id_1 <- data %>% filter(ID == 1)
for(i in 1:ncol(data)){
cat("\n=========\n")
cat(colnames(data)[i])
cat("\n=========\n")
print(summary(data[,i]))
}
# Taking a look at the problematic data
problematic <- data %>% filter(
appCat.builtin < 0 | appCat.entertainment < 0)
problematic
# Filtering these 3 responses
data_cleaner <- data %>% filter(
(appCat.builtin >= 0 | is.na(appCat.builtin)) &
(appCat.entertainment >= 0 | is.na(appCat.entertainment))
)
data <- data_cleaner
# Identifying duplicate rows
duplicates <- duplicated(data)
